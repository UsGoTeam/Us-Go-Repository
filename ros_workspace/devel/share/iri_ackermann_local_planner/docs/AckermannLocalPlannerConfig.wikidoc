# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~max_sim_time
0.default= 10.0
0.type= double
0.desc=The amount of time to roll trajectories out for in seconds Range: 0.0 to 20.0
1.name= ~min_sim_time
1.default= 1.7
1.type= double
1.desc=The amount of time to roll trajectories out for in seconds Range: 0.0 to 10.0
2.name= ~sim_granularity
2.default= 0.025
2.type= double
2.desc=The granularity with which to check for collisions along each trajectory in meters Range: 0.0 to std::numeric_limits<double>::infinity()
3.name= ~angular_sim_granularity
3.default= 0.1
3.type= double
3.desc=The granularity with which to check for collisions for rotations in radians Range: 0.0 to std::numeric_limits<double>::infinity()
4.name= ~path_distance_bias
4.default= 32.0
4.type= double
4.desc=The weight for the path distance part of the cost function Range: 0.0 to std::numeric_limits<double>::infinity()
5.name= ~goal_distance_bias
5.default= 24.0
5.type= double
5.desc=The weight for the goal distance part of the cost function Range: 0.0 to std::numeric_limits<double>::infinity()
6.name= ~occdist_scale
6.default= 0.01
6.type= double
6.desc=The weight for the obstacle distance part of the cost function Range: 0.0 to std::numeric_limits<double>::infinity()
7.name= ~stop_time_buffer
7.default= 0.2
7.type= double
7.desc=The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds Range: 0.0 to std::numeric_limits<double>::infinity()
8.name= ~oscillation_reset_dist
8.default= 0.05
8.type= double
8.desc=The distance the robot must travel before oscillation flags are reset, in meters Range: 0.0 to std::numeric_limits<double>::infinity()
9.name= ~oscillation_reset_angle
9.default= 0.2
9.type= double
9.desc=The angle the robot must turn before oscillation flags are reset, in radians Range: 0.0 to std::numeric_limits<double>::infinity()
10.name= ~forward_point_distance
10.default= 0.325
10.type= double
10.desc=The distance from the center point of the robot to place an additional scoring point, in meters Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
11.name= ~scaling_speed
11.default= 0.25
11.type= double
11.desc=The absolute value of the velocity at which to start scaling the robot's footprint, in m/s Range: 0.0 to std::numeric_limits<double>::infinity()
12.name= ~max_scaling_factor
12.default= 0.2
12.type= double
12.desc=The maximum factor to scale the robot's footprint by Range: 0.0 to std::numeric_limits<double>::infinity()
13.name= ~trans_vel_samples
13.default= 3
13.type= int
13.desc=The number of samples to use when exploring the x velocity space Range: 1 to 2147483647
14.name= ~steer_angle_samples
14.default= 10
14.type= int
14.desc=The number of samples to use when exploring the steer angle space Range: 1 to 2147483647
15.name= ~angular_vel_samples
15.default= 10
15.type= int
15.desc=The number of samples to use when exploring the angular velocity space Range: 1 to 2147483647
16.name= ~use_steer_angle_cmd
16.default= False
16.type= bool
16.desc=Whether to use the steer angle or the angular velocity. 
17.name= ~invert_steer_angle_cmd
17.default= False
17.type= bool
17.desc=Whether to use the invert the steer angle command or not. 
18.name= ~use_stopped_steering
18.default= True
18.type= bool
18.desc=Whether to allow steering while stopped or not. 
19.name= ~stopped_steering_angle_threshold
19.default= 0.05
19.type= double
19.desc=Angle difference threshold (rad) to perform steering change while stopped. Range: 0.0 to std::numeric_limits<double>::infinity()
20.name= ~use_stuck_check
20.default= True
20.type= bool
20.desc=Whether to allow robot stuck check or not. 
21.name= ~stuck_check_vel_threshold
21.default= 0.05
21.type= double
21.desc=Velocity threshold (m/s) to consider robot stuck. Range: 0.0 to std::numeric_limits<double>::infinity()
22.name= ~stuck_check_max_occurrences
22.default= 10
22.type= int
22.desc=Max number of stuck occurrences allowed until moving to next segment or replaning. Range: 0 to 2147483647
23.name= ~prune_plan
23.default= False
23.type= bool
23.desc=Start following closest point of global plan, not first point (if different). 
24.name= ~xy_goal_tolerance
24.default= 0.1
24.type= double
24.desc=Within what maximum distance we consider the robot to be in goal Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
25.name= ~yaw_goal_tolerance
25.default= 0.1
25.type= double
25.desc=Within what maximum angle difference we consider the robot to face goal direction Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
26.name= ~trans_stopped_vel
26.default= 0.1
26.type= double
26.desc=Below what maximum velocity we consider the robot to be stopped in translation Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
27.name= ~rot_stopped_vel
27.default= 0.1
27.type= double
27.desc=Below what maximum rotation velocity we consider the robot to be stopped in rotation Range: -std::numeric_limits<double>::infinity() to std::numeric_limits<double>::infinity()
28.name= ~restore_defaults
28.default= False
28.type= bool
28.desc=Restore to the original configuration. 
29.name= ~max_trans_vel
29.default= 0.3
29.type= double
29.desc=maximum translational speed Range: 0.0 to 20.0
30.name= ~min_trans_vel
30.default= -0.3
30.type= double
30.desc=minimum translational speed Range: -20.0 to 0.0
31.name= ~max_trans_acc
31.default= 1.0
31.type= double
31.desc=maximum translational acceleration Range: 0.0 to 20.0
32.name= ~max_steer_angle
32.default= 0.45
32.type= double
32.desc=maximum steer angle Range: 0.0 to 0.54
33.name= ~min_steer_angle
33.default= -0.45
33.type= double
33.desc=minimum steer angle Range: -0.54 to 0.0
34.name= ~max_steer_vel
34.default= 1.0
34.type= double
34.desc=maximum steer speed Range: 0.0 to 2.0
35.name= ~min_steer_vel
35.default= -1.0
35.type= double
35.desc=minimum steer speed Range: -2.0 to 0.0
36.name= ~max_steer_acc
36.default= 0.36
36.type= double
36.desc=maximum steer acceleration Range: 0.0 to 5.0
37.name= ~max_angular_vel
37.default= 0.3
37.type= double
37.desc=maximum angular speed Range: 0.0 to 20.0
38.name= ~min_angular_vel
38.default= -0.3
38.type= double
38.desc=minimum angular speed Range: -20.0 to 0.0
39.name= ~axis_distance
39.default= 1.65
39.type= double
39.desc=distance between axes Range: -2.0 to 2.0
40.name= ~wheel_distance
40.default= 1.2
40.type= double
40.desc=distance between wheels Range: 0.0 to 2.0
41.name= ~wheel_radius
41.default= 0.436
41.type= double
41.desc=Wheel diameter Range: 0.0 to 2.0
42.name= ~use_trans_vel_deadzone
42.default= False
42.type= bool
42.desc=Whether to use a deadzone in the translational velocity or not 
43.name= ~trans_vel_deadzone
43.default= 0.1
43.type= double
43.desc=Translatinal velocity minimum value Range: 0.01 to 1.0
44.name= ~split_ignore_length
44.default= 1.0
44.type= double
44.desc=Paths segments under this length will be ignored Range: 0.0 to 2.0
45.name= ~cmd_vel_avg
45.default= 1
45.type= int
45.desc=Number of cmd_vel to average Range: 1 to 20
46.name= ~odom_avg
46.default= 1
46.type= int
46.desc=Number of odom to average Range: 1 to 20
47.name= ~planner_patience
47.default= 2
47.type= int
47.desc=number of impossible paths before replanning Range: 0 to 10
48.name= ~hdiff_scale
48.default= 1.0
48.type= double
48.desc=The weight for the heading distance part of the cost function Range: 0.0 to 500.0
49.name= ~heading_points
49.default= 8
49.type= int
49.desc=The number of points to check the heading Range: 1 to 64
}
}
# End of autogenerated section. You may edit below.
