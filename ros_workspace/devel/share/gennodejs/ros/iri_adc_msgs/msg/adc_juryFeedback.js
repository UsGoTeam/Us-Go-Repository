// Auto-generated. Do not edit!

// (in-package iri_adc_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class adc_juryFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.status = null;
      this.base_position = null;
    }
    else {
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = '';
      }
      if (initObj.hasOwnProperty('base_position')) {
        this.base_position = initObj.base_position
      }
      else {
        this.base_position = new geometry_msgs.msg.PoseStamped();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type adc_juryFeedback
    // Serialize message field [status]
    bufferOffset = _serializer.string(obj.status, buffer, bufferOffset);
    // Serialize message field [base_position]
    bufferOffset = geometry_msgs.msg.PoseStamped.serialize(obj.base_position, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type adc_juryFeedback
    let len;
    let data = new adc_juryFeedback(null);
    // Deserialize message field [status]
    data.status = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [base_position]
    data.base_position = geometry_msgs.msg.PoseStamped.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.status.length;
    length += geometry_msgs.msg.PoseStamped.getMessageSize(object.base_position);
    return length + 4;
  }

  static datatype() {
    // Returns string type for a message object
    return 'iri_adc_msgs/adc_juryFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'c9ecb5d8e4e7662a4af7ee287ef77c65';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback
    
    #constant string for feedback status
    string NAVIGATING         = Navigating to goal
    string STOPPED            = Stopped at goal
    string PARKING            = Parking at goal
    string PARKED             = Parked at goal
    string UNPARKING          = Unparking from goal
    string PAUSED             = Paused
    string FINISHED           = Finished
    string OVERCOMING_STATIC  = Overcoming static obstacle
    string OVERCOMING_DYNAMIC = Overcoming dynamic obstacle
    string DETECTED_SIGN      = Detected traffic sign
    string DETECTED_RED       = Detected traffic light RED
    string DETECTED_GREEN     = Detected traffic light GREEN
    string EMERGENCY_STOP     = Emergency stop
    
    string status
    geometry_msgs/PoseStamped base_position
    
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new adc_juryFeedback(null);
    if (msg.status !== undefined) {
      resolved.status = msg.status;
    }
    else {
      resolved.status = ''
    }

    if (msg.base_position !== undefined) {
      resolved.base_position = geometry_msgs.msg.PoseStamped.Resolve(msg.base_position)
    }
    else {
      resolved.base_position = new geometry_msgs.msg.PoseStamped()
    }

    return resolved;
    }
};

// Constants for message
adc_juryFeedback.Constants = {
  NAVIGATING: 'Navigating to goal',
  STOPPED: 'Stopped at goal',
  PARKING: 'Parking at goal',
  PARKED: 'Parked at goal',
  UNPARKING: 'Unparking from goal',
  PAUSED: 'Paused',
  FINISHED: 'Finished',
  OVERCOMING_STATIC: 'Overcoming static obstacle',
  OVERCOMING_DYNAMIC: 'Overcoming dynamic obstacle',
  DETECTED_SIGN: 'Detected traffic sign',
  DETECTED_RED: 'Detected traffic light RED',
  DETECTED_GREEN: 'Detected traffic light GREEN',
  EMERGENCY_STOP: 'Emergency stop',
}

module.exports = adc_juryFeedback;
