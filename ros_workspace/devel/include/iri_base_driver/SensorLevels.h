// Generated by gencpp from file iri_base_driver/SensorLevels.msg
// DO NOT EDIT!


#ifndef IRI_BASE_DRIVER_MESSAGE_SENSORLEVELS_H
#define IRI_BASE_DRIVER_MESSAGE_SENSORLEVELS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iri_base_driver
{
template <class ContainerAllocator>
struct SensorLevels_
{
  typedef SensorLevels_<ContainerAllocator> Type;

  SensorLevels_()
    {
    }
  SensorLevels_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RECONFIGURE_CLOSE)
  #undef RECONFIGURE_CLOSE
#endif
#if defined(_WIN32) && defined(RECONFIGURE_STOP)
  #undef RECONFIGURE_STOP
#endif
#if defined(_WIN32) && defined(RECONFIGURE_RUNNING)
  #undef RECONFIGURE_RUNNING
#endif

  enum {
    RECONFIGURE_CLOSE = 3,
    RECONFIGURE_STOP = 1,
    RECONFIGURE_RUNNING = 0,
  };


  typedef boost::shared_ptr< ::iri_base_driver::SensorLevels_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_base_driver::SensorLevels_<ContainerAllocator> const> ConstPtr;

}; // struct SensorLevels_

typedef ::iri_base_driver::SensorLevels_<std::allocator<void> > SensorLevels;

typedef boost::shared_ptr< ::iri_base_driver::SensorLevels > SensorLevelsPtr;
typedef boost::shared_ptr< ::iri_base_driver::SensorLevels const> SensorLevelsConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_base_driver::SensorLevels_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_base_driver::SensorLevels_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace iri_base_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_base_driver::SensorLevels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_base_driver::SensorLevels_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_base_driver::SensorLevels_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6322637bee96d5489db6e2127c47602c";
  }

  static const char* value(const ::iri_base_driver::SensorLevels_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6322637bee96d548ULL;
  static const uint64_t static_value2 = 0x9db6e2127c47602cULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_base_driver/SensorLevels";
  }

  static const char* value(const ::iri_base_driver::SensorLevels_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte RECONFIGURE_CLOSE = 3  # Parameters that need a sensor to be stopped completely when changed\n"
"byte RECONFIGURE_STOP = 1  # Parameters that need a sensor to stop streaming when changed\n"
"byte RECONFIGURE_RUNNING = 0 # Parameters that can be changed while a sensor is streaming\n"
"\n"
;
  }

  static const char* value(const ::iri_base_driver::SensorLevels_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorLevels_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_base_driver::SensorLevels_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::iri_base_driver::SensorLevels_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // IRI_BASE_DRIVER_MESSAGE_SENSORLEVELS_H
