// Generated by gencpp from file iri_adc_msgs/adc_juryFeedback.msg
// DO NOT EDIT!


#ifndef IRI_ADC_MSGS_MESSAGE_ADC_JURYFEEDBACK_H
#define IRI_ADC_MSGS_MESSAGE_ADC_JURYFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace iri_adc_msgs
{
template <class ContainerAllocator>
struct adc_juryFeedback_
{
  typedef adc_juryFeedback_<ContainerAllocator> Type;

  adc_juryFeedback_()
    : status()
    , base_position()  {
    }
  adc_juryFeedback_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , base_position(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _base_position_type;
  _base_position_type base_position;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NAVIGATING)
  #undef NAVIGATING
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif
#if defined(_WIN32) && defined(PARKING)
  #undef PARKING
#endif
#if defined(_WIN32) && defined(PARKED)
  #undef PARKED
#endif
#if defined(_WIN32) && defined(UNPARKING)
  #undef UNPARKING
#endif
#if defined(_WIN32) && defined(PAUSED)
  #undef PAUSED
#endif
#if defined(_WIN32) && defined(FINISHED)
  #undef FINISHED
#endif
#if defined(_WIN32) && defined(OVERCOMING_STATIC)
  #undef OVERCOMING_STATIC
#endif
#if defined(_WIN32) && defined(OVERCOMING_DYNAMIC)
  #undef OVERCOMING_DYNAMIC
#endif
#if defined(_WIN32) && defined(DETECTED_SIGN)
  #undef DETECTED_SIGN
#endif
#if defined(_WIN32) && defined(DETECTED_RED)
  #undef DETECTED_RED
#endif
#if defined(_WIN32) && defined(DETECTED_GREEN)
  #undef DETECTED_GREEN
#endif
#if defined(_WIN32) && defined(EMERGENCY_STOP)
  #undef EMERGENCY_STOP
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> NAVIGATING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STOPPED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PARKING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PARKED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNPARKING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PAUSED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> FINISHED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> OVERCOMING_STATIC;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> OVERCOMING_DYNAMIC;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DETECTED_SIGN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DETECTED_RED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> DETECTED_GREEN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> EMERGENCY_STOP;

  typedef boost::shared_ptr< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct adc_juryFeedback_

typedef ::iri_adc_msgs::adc_juryFeedback_<std::allocator<void> > adc_juryFeedback;

typedef boost::shared_ptr< ::iri_adc_msgs::adc_juryFeedback > adc_juryFeedbackPtr;
typedef boost::shared_ptr< ::iri_adc_msgs::adc_juryFeedback const> adc_juryFeedbackConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::NAVIGATING =
        
          "Navigating to goal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::STOPPED =
        
          "Stopped at goal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::PARKING =
        
          "Parking at goal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::PARKED =
        
          "Parked at goal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::UNPARKING =
        
          "Unparking from goal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::PAUSED =
        
          "Paused"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::FINISHED =
        
          "Finished"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::OVERCOMING_STATIC =
        
          "Overcoming static obstacle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::OVERCOMING_DYNAMIC =
        
          "Overcoming dynamic obstacle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::DETECTED_SIGN =
        
          "Detected traffic sign"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::DETECTED_RED =
        
          "Detected traffic light RED"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::DETECTED_GREEN =
        
          "Detected traffic light GREEN"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      adc_juryFeedback_<ContainerAllocator>::EMERGENCY_STOP =
        
          "Emergency stop"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator1> & lhs, const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.base_position == rhs.base_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator1> & lhs, const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iri_adc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9ecb5d8e4e7662a4af7ee287ef77c65";
  }

  static const char* value(const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9ecb5d8e4e7662aULL;
  static const uint64_t static_value2 = 0x4af7ee287ef77c65ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_adc_msgs/adc_juryFeedback";
  }

  static const char* value(const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"\n"
"#constant string for feedback status\n"
"string NAVIGATING         = Navigating to goal\n"
"string STOPPED            = Stopped at goal\n"
"string PARKING            = Parking at goal\n"
"string PARKED             = Parked at goal\n"
"string UNPARKING          = Unparking from goal\n"
"string PAUSED             = Paused\n"
"string FINISHED           = Finished\n"
"string OVERCOMING_STATIC  = Overcoming static obstacle\n"
"string OVERCOMING_DYNAMIC = Overcoming dynamic obstacle\n"
"string DETECTED_SIGN      = Detected traffic sign\n"
"string DETECTED_RED       = Detected traffic light RED\n"
"string DETECTED_GREEN     = Detected traffic light GREEN\n"
"string EMERGENCY_STOP     = Emergency stop\n"
"\n"
"string status\n"
"geometry_msgs/PoseStamped base_position\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.base_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adc_juryFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iri_adc_msgs::adc_juryFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    s << indent << "base_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.base_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRI_ADC_MSGS_MESSAGE_ADC_JURYFEEDBACK_H
