// Generated by gencpp from file iri_adc_msgs/adc_goal.msg
// DO NOT EDIT!


#ifndef IRI_ADC_MSGS_MESSAGE_ADC_GOAL_H
#define IRI_ADC_MSGS_MESSAGE_ADC_GOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iri_adc_msgs
{
template <class ContainerAllocator>
struct adc_goal_
{
  typedef adc_goal_<ContainerAllocator> Type;

  adc_goal_()
    : id()
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , type(0)  {
    }
  adc_goal_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , type(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef int32_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PASSTHROUGH_GOAL)
  #undef PASSTHROUGH_GOAL
#endif
#if defined(_WIN32) && defined(STOP_GOAL)
  #undef STOP_GOAL
#endif
#if defined(_WIN32) && defined(PARKING_GOAL)
  #undef PARKING_GOAL
#endif

  enum {
    PASSTHROUGH_GOAL = 0u,
    STOP_GOAL = 1u,
    PARKING_GOAL = 2u,
  };


  typedef boost::shared_ptr< ::iri_adc_msgs::adc_goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_adc_msgs::adc_goal_<ContainerAllocator> const> ConstPtr;

}; // struct adc_goal_

typedef ::iri_adc_msgs::adc_goal_<std::allocator<void> > adc_goal;

typedef boost::shared_ptr< ::iri_adc_msgs::adc_goal > adc_goalPtr;
typedef boost::shared_ptr< ::iri_adc_msgs::adc_goal const> adc_goalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_adc_msgs::adc_goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iri_adc_msgs::adc_goal_<ContainerAllocator1> & lhs, const ::iri_adc_msgs::adc_goal_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iri_adc_msgs::adc_goal_<ContainerAllocator1> & lhs, const ::iri_adc_msgs::adc_goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iri_adc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_adc_msgs::adc_goal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_adc_msgs::adc_goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_adc_msgs::adc_goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "997a694e5c5bce1148d1ef6403aee244";
  }

  static const char* value(const ::iri_adc_msgs::adc_goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x997a694e5c5bce11ULL;
  static const uint64_t static_value2 = 0x48d1ef6403aee244ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_adc_msgs/adc_goal";
  }

  static const char* value(const ::iri_adc_msgs::adc_goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#type definitions\n"
"uint8 PASSTHROUGH_GOAL=0\n"
"uint8 STOP_GOAL=1\n"
"uint8 PARKING_GOAL=2\n"
"\n"
"string id       # goal identifier\n"
"float32 x       # x coordinates in meters [m]\n"
"float32 y       # y coordinate in meters [m]\n"
"float32 yaw     # yaw orientation in radians [rad]\n"
"int32 type      # see type definitions above\n"
;
  }

  static const char* value(const ::iri_adc_msgs::adc_goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adc_goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_adc_msgs::adc_goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iri_adc_msgs::adc_goal_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRI_ADC_MSGS_MESSAGE_ADC_GOAL_H
