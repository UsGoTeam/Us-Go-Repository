// Generated by gencpp from file iri_adc_msgs/set_car_lightsRequest.msg
// DO NOT EDIT!


#ifndef IRI_ADC_MSGS_MESSAGE_SET_CAR_LIGHTSREQUEST_H
#define IRI_ADC_MSGS_MESSAGE_SET_CAR_LIGHTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iri_adc_msgs
{
template <class ContainerAllocator>
struct set_car_lightsRequest_
{
  typedef set_car_lightsRequest_<ContainerAllocator> Type;

  set_car_lightsRequest_()
    : lights(0)  {
    }
  set_car_lightsRequest_(const ContainerAllocator& _alloc)
    : lights(0)  {
  (void)_alloc;
    }



   typedef uint8_t _lights_type;
  _lights_type lights;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CAR_OFF)
  #undef CAR_OFF
#endif
#if defined(_WIN32) && defined(CAR_NORMAL_DRIVE)
  #undef CAR_NORMAL_DRIVE
#endif
#if defined(_WIN32) && defined(CAR_BRAKE)
  #undef CAR_BRAKE
#endif
#if defined(_WIN32) && defined(CAR_TURN_LEFT)
  #undef CAR_TURN_LEFT
#endif
#if defined(_WIN32) && defined(CAR_TURN_RIGHT)
  #undef CAR_TURN_RIGHT
#endif
#if defined(_WIN32) && defined(CAR_PARKED)
  #undef CAR_PARKED
#endif
#if defined(_WIN32) && defined(CAR_EMERGENCY)
  #undef CAR_EMERGENCY
#endif
#if defined(_WIN32) && defined(CAR_AMBULANCE)
  #undef CAR_AMBULANCE
#endif
#if defined(_WIN32) && defined(CAR_CHARGING)
  #undef CAR_CHARGING
#endif

  enum {
    CAR_OFF = 0u,
    CAR_NORMAL_DRIVE = 1u,
    CAR_BRAKE = 2u,
    CAR_TURN_LEFT = 3u,
    CAR_TURN_RIGHT = 4u,
    CAR_PARKED = 5u,
    CAR_EMERGENCY = 6u,
    CAR_AMBULANCE = 7u,
    CAR_CHARGING = 8u,
  };


  typedef boost::shared_ptr< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_car_lightsRequest_

typedef ::iri_adc_msgs::set_car_lightsRequest_<std::allocator<void> > set_car_lightsRequest;

typedef boost::shared_ptr< ::iri_adc_msgs::set_car_lightsRequest > set_car_lightsRequestPtr;
typedef boost::shared_ptr< ::iri_adc_msgs::set_car_lightsRequest const> set_car_lightsRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator1> & lhs, const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.lights == rhs.lights;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator1> & lhs, const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iri_adc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbf39d5601e4232b41019dc5a0264ee4";
  }

  static const char* value(const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbf39d5601e4232bULL;
  static const uint64_t static_value2 = 0x41019dc5a0264ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_adc_msgs/set_car_lightsRequest";
  }

  static const char* value(const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CAR_OFF = 0\n"
"uint8 CAR_NORMAL_DRIVE = 1\n"
"uint8 CAR_BRAKE = 2\n"
"uint8 CAR_TURN_LEFT = 3\n"
"uint8 CAR_TURN_RIGHT = 4\n"
"uint8 CAR_PARKED = 5\n"
"uint8 CAR_EMERGENCY = 6\n"
"uint8 CAR_AMBULANCE = 7\n"
"uint8 CAR_CHARGING = 8\n"
"\n"
"uint8 lights\n"
;
  }

  static const char* value(const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lights);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_car_lightsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iri_adc_msgs::set_car_lightsRequest_<ContainerAllocator>& v)
  {
    s << indent << "lights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lights);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRI_ADC_MSGS_MESSAGE_SET_CAR_LIGHTSREQUEST_H
